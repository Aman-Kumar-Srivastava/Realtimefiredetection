# -*- coding: utf-8 -*-
"""RealTimeFireDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ufut3S4zhc_RAXGI2CmOD1sO29iPLAZj
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install -q keras
import keras

import tensorflow as tf
import keras_preprocessing
from keras_preprocessing import image
from keras_preprocessing.image import ImageDataGenerator

TRAINING_DIR = "/content/drive/MyDrive/fire/train"
training_datagen = ImageDataGenerator(rescale=1./255,
zoom_range=0.15,
horizontal_flip=True,
fill_mode='nearest')

VALIDATION_DIR = "/content/drive/MyDrive/fire/validation"
validation_datagen = ImageDataGenerator(rescale = 1./255)

train_generator = training_datagen.flow_from_directory(
TRAINING_DIR,
target_size=(224,224),
shuffle = True,
class_mode='categorical',
batch_size = 128)

validation_generator = validation_datagen.flow_from_directory(
VALIDATION_DIR,
target_size=(224,224),
class_mode='categorical',
shuffle = True,
batch_size= 14)

#traning
from tensorflow.keras.applications.inception_v3 import InceptionV3
from tensorflow.keras.preprocessing import image
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Input, Dropout
input_tensor = Input(shape=(224, 224, 3))
base_model = InceptionV3(input_tensor=input_tensor,
 weights='imagenet', include_top=False)

x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(2048, activation='relu')(x)
x = Dropout(0.25)(x)
x = Dense(1024, activation='relu')(x)
x = Dropout(0.2)(x)
predictions = Dense(2, activation='softmax')(x)

model = Model(inputs=base_model.input, outputs=predictions)
for layer in base_model.layers:
  layer.trainable = False

model.compile(optimizer='rmsprop', loss='categorical_crossentropy',
              metrics=['acc'])
history = model.fit(
train_generator,
steps_per_epoch = 6,
epochs = 5,
validation_data = validation_generator,
validation_steps = 6)

#To train the top 2 inception blocks, freeze the first 100 layers and unfreeze the rest.
#from tensorflow.keras.model import load_model
for layer in model.layers[:100]:
 layer.trainable = False

for layer in model.layers[100:]:
  layer.trainable = True
#Recompile the model for these modifications to take effectfrom tensorflow.keras.optimizers import SGD
model.compile(optimizer=tf.keras.optimizers.SGD(lr=0.0001, momentum=0.9),
              loss='categorical_crossentropy',
              metrics=['acc'])

history = model.fit(
train_generator,
steps_per_epoch = 6,
epochs = 5,
validation_data = validation_generator,
validation_steps = 6)
model.save('/content/drive/MyDrive/fire/InceptionV3.h5')
del model

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import matplotlib.pyplot as plt
acc = history.history['acc']
val_acc = history.history['val_acc']
loss = history.history['loss']
val_loss = history.history['val_loss']
epochs = range(len(acc))

plt.plot(epochs, acc, 'g', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')

plt.legend(loc=0)
plt.figure()
plt.show()

plt.plot(epochs, loss, 'r', label='Training loss')
plt.plot(epochs, val_loss, 'orange', label='Validation loss')
plt.title('Training and validation loss')

plt.legend(loc=0)
plt.figure()
plt.show()

import cv2
import numpy as np
from PIL import Image
import tensorflow as tf
from keras.preprocessing import image
!pip install playsound
import playsound
import smtplib
import threading

Alarm_Status = False
Email_Status = False
Fire_Reported = 0

def play_alarm_sound():
    while True:
        playsound.playsound('Alarm Sound.mp3', True)

def send_mail():
    Email = "firefix05@gmail.com"
    Email = Email.lower()

    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.ehlo()
        server.starttls()
        server.login("firefix05@gmail.com", 'MaChodDenge')
        server.sendmail('firefix05@gmail.com',Email,
                        "Warning A Fire Accident has been reported at Saket Bhawan")
        print("sent to {}".format(Email))
        server.close()
    except Exception as e:
        print(e)

#Load the saved model
model = tf.keras.models.load_model('/content/drive/MyDrive/fire/InceptionV3.h5')
video = cv2.VideoCapture(0)
while True:
        ret, frame = video.read()
        try:
          #Resizing into 224x224 because we trained the model with this image size.
         frame = cv2.resize(img, (224, 224), interpolation=cv2.INTER_AREA)
        except:
         break
         frame = cv2.flip(frame,1)
         blur = cv2.GaussianBlur(frame,(15,15),0)
         hsv = cv2.cvtColor(blur,cv2.COLOR_BGR2HSV)


         lower = [18,50,50]
         upper = [35,255,255]

         lower = np.array(lower,dtype='uint8')
         upper = np.array(upper,dtype='uint8')

         mask = cv2.inRange(hsv,lower,upper)

         output = cv2.bitwise_and(frame,hsv,mask=mask)
         res = cv2.bitwise_and(frame, frame, mask=mask)

         gray = cv2.cvtColor(res, cv2.COLOR_BGR2GRAY)
         canny = cv2.Canny(gray, 100, 200)

         _, thr = cv2.threshold(mask, 100, 255, 0)
         contours, _ = cv2.findContours(thr, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
         cv2.drawContours(res, contours, -1, (255, 0, 0), 3)

        #cv2.imshow('Original Frame', frame)
        #cv2.imshow('Mask', mask)
        #cv2.imshow('Res', res)
        #cv2.imshow('canny', canny)
        #Convert the captured frame into RGB
        im = Image.fromarray(frame)
        img_array = image.img_to_array(im)
        img_array = np.expand_dims(img_array, axis=0) / 255
        probabilities = model.predict(img_array)[0]
        #Calling the predict method on model to predict 'fire' on the image
        prediction = np.argmax(probabilities)
        #if prediction is 0, which means there is fire in the frame.
        if prediction == 0:
         print("fire detected")
         Fire_Reported = Fire_Reported + 1

         if Fire_Reported >= 1:

            if Alarm_Status == False:
                threading.Thread(target=play_alarm_sound).start()
                Alarm_Status = True

            if Email_Status == False:
                threading.Thread(target=send_mail).start()
                Email_Status = True

        if ret == False:
            break
        print(probabilities[prediction])
        cv2.imshow('output', output)
        key=cv2.waitKey(1)
        if key == ord('q'):
                break
video.release()
cv2.destroyAllWindows()
